########################################################
## CSV log Parsing script for MicroFaaS Project       ##
## Boston University PEACLAB 2021                     ##
########################################################

#MicroFaaS: Script to parse through CSV generated by Orchestrator and spits out stats.
import csv
from datetime import datetime
import os
import time
import sys

def update_workload(Workload):
			Workload[row['function_id']]['time'] += int(row['exec_time'])
			Workload[row['function_id']]['overhead'] += int(row['rtt']) - int(row['exec_time'])
			Workload[row['function_id']]['count'] += 1
			Workload[row['function_id']]['average_worktime'] = Workload[row['function_id']]['time'] / Workload[row['function_id']]['count']
			Workload[row['function_id']]['average_overhead'] = Workload[row['function_id']]['overhead'] / Workload[row['function_id']]['count']
			
def update_workers(Workers):
			Workers[int(row['worker'])]['count'] += 1
			
with open(sys.argv[1], newline='') as csvfile:
	r = csv.DictReader(csvfile)
	Workload, Workers = dict(), dict()
	try:
		start_time = datetime.strptime(next(r)['timestamp'], "%Y-%m-%d %H:%M:%S")
	except KeyError:
		print("Log File: {f}".format(f=os.path.basename(sys.argv[1])))
		print("No header in CSV, quitting.")
		exit(-1)
	total_functions = 0
	for row in r:

		try:
			update_workload(Workload)
			
		except KeyError:
			Workload[row['function_id']] = {'time': 0, 'count' : 0, 'average_worktime' : 0, 'overhead' : 0, 'average_overhead' : 0}
			update_workload(Workload)
			
		try:
			update_workers(Workers)
		except KeyError:
			Workers[int(row['worker'])] =  {'count': 0}
			update_workers(Workers)
		total_functions += 1

		
		end_time = datetime.strptime(row['timestamp'], "%Y-%m-%d %H:%M:%S")
	runtime = end_time-start_time
	print("Log File: {f}".format(f=os.path.basename(sys.argv[1])))
	print("Total Runtime: {rt}".format(rt=runtime))
	print("Functions per Minute: {fpm:.2f}\n".format(fpm=total_functions/(runtime.total_seconds()/60)))
	for i, key in enumerate(sorted (Workload.keys())):
		print("Average {key} runtime: {avg:.3f}. Ran {count} times.".format(key = key, avg = Workload[key]['average_worktime'], count=Workload[key]['count']))
	print()
	print('xi,fname,worktime,overhead')
	for i, key in enumerate(sorted (Workload.keys())):
		print("{i},{func_name},{avgwt:.3f},{avgoh:.3f}".format(i = i, func_name = key, avgwt = Workload[key]['average_worktime'], avgoh = Workload[key]['average_overhead']))
	print()
	for key in sorted (Workers.keys()):
		print("Worker {w} ran {count} functions successfully.".format(w=key, count=Workers[key]['count']))
	print("--------------------------------------------------------------------------------")